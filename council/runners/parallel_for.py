"""

A module that provides a class for executing operations in parallel within an iterable context, utilizing a generator function to produce items and delegating their handling to a specified skill runner.

Classes:
    ParallelFor(LoopRunnerBase): A class that inherits from LoopRunnerBase and orchestrates parallel execution of tasks.

Attributes:
    generator (RunnerGenerator): A generator function that yields items to be processed.
    skill (SkillRunnerBase): A skill runner that processes each item generated.
    parallelism (int): The number of concurrent executions to allow.

Methods:
    __init__(self, generator, skill, parallelism=5):
        Initializes a new instance of ParallelFor with the specified generator,
        skill runner, and degree of parallelism.

    _run(self, context, executor):
        Runs the parallel execution logic, forking the context for each item and
        handling them with the skill runner.

    _run_skill(self, context, iteration):
        Invokes the skill runner's run_in_current_thread method with a given
        context and iteration, logging the start and end of each iteration.

    _generate(self, context):
        Generates an iterable of IterationContext objects using the supplied
        generator function. If an exception is raised during generation, it
        encapsulates it in a RunnerGeneratorError.

Exceptions:
    RunnerGeneratorError: An error raised if the generator function encounters
                         an exception during item generation.


"""
from concurrent import futures
from typing import Iterable

from more_itertools import batched

from council.contexts import IterationContext, ChainContext
from council.utils import Option

from .errrors import RunnerGeneratorError
from .loop_runner_base import LoopRunnerBase
from .runner_executor import RunnerExecutor
from .types import RunnerGenerator
from .skill_runner_base import SkillRunnerBase


class ParallelFor(LoopRunnerBase):
    """
    ParallelFor is a derivative of LoopRunnerBase designed to execute a given SkillRunnerBase in
    parallel across a series of iterations. It accepts a generator that yields elements to run the given
    skill, and it manages parallel execution using a specified level of parallelism.
    
    Attributes:
        _generator (RunnerGenerator):
             An object capable of generating the elements to iterate over.
        _skill (SkillRunnerBase):
             A thread-safe instance that executes a piece of work for each element
            generated by _generator.
        _parallelism (int):
             The maximum number of concurrent executions to allow.
    
    Methods:
        __init__:
             Initializes an instance of ParallelFor.
        _run:
             Orchestrates parallel execution batches based on the level of parallelism and handles the lifecycle
            of any futures created during skill execution.
        _run_skill:
             Executes the _skill's logic for a single iteration, managing any logging associated with
            the iteration's start and end.
        _generate:
             Utilizes the provided _generator to create an Iterable of IterationContexts.
    
    Raises:
        RunnerGeneratorError:
             An error thrown if an exception occurs while generating iteration contexts.

    """

    def __init__(self, generator: RunnerGenerator, skill: SkillRunnerBase, parallelism: int = 5):
        """
        Initializes a ParallelForRunner instance with a given RunnerGenerator, SkillRunnerBase, and parallelism degree.
        
        Args:
            generator (RunnerGenerator):
                 The generator responsible for creating runners.
            skill (SkillRunnerBase):
                 The skill runner that will be monitored and used within the parallel execution.
            parallelism (int, optional):
                 The degree of parallelism, i.e., the number of tasks to be executed in parallel. Defaults to 5.

        """
        super().__init__("parallelForRunner")
        self._generator = generator
        self._skill = self.new_monitor("skill", skill)
        self._parallelism = parallelism

    def _run(self, context: ChainContext, executor: RunnerExecutor) -> None:
        """
        Executes tasks concurrently, handling their context and budget. This function iterates over batches of items
        generated by `_generate`, forks the given context for each, and submits the tasks to be run in parallel
        by the executor. It monitors the execution, waiting either for all futures to complete or an exception to
        occur, within the time frame dictated by the context's budget. After execution, it merges the results back
        into the main context.
        
        Args:
            context (ChainContext):
                 The context within which the tasks are executed.
            executor (RunnerExecutor):
                 The executor responsible for running the tasks. It provides a `submit` method
                to execute calls asynchronously.
        
        Raises:
            Any exception raised during the execution of the tasks. If any task raises an
            exception, it will be propagated and may interrupt the execution flow.
        
        Note:
            The method is tightly coupled with private attributes and methods such as `_generate`,
            `_run_skill`, and `rethrow_if_exception`, which are expected to be defined in the same scope.
            _parallelism attribute should determine the size of the batches. The `fork_for` method of the context
            creates new context instances specific for each task and `_skill` attribute is utilized while forking.
            This method supports cancellation and budget expiration; it checks the budget's remaining duration and
            cancellation token within the execution flow.
            If budget expiration or an exception occurs, the method will try to cancel all
            running futures and merge the partial results from the contexts back into the main context.
            

        """
        inner_contexts = []
        all_fs = []
        try:
            for batch in batched(self._generate(context), self._parallelism):
                inner = [context.fork_for(self._skill) for _ in batch]
                inner_contexts.extend(inner)
                fs = [executor.submit(self._run_skill, inner, iteration) for (inner, iteration) in zip(inner, batch)]
                all_fs.extend(fs)
                dones, not_dones = futures.wait(fs, context.budget.remaining_duration, futures.FIRST_EXCEPTION)
                self.rethrow_if_exception(dones)
        finally:
            [f.cancel() for f in all_fs]
            context.merge(inner_contexts)

    def _run_skill(self, context: ChainContext, iteration: IterationContext):
        """
        Runs a skill within the current thread as part of a Chain-based operation.
        This method is used to execute a skill when it's the skill's turn in the chain workflow, logging the start and end of each iteration. It encapsulates the skill execution in a try-finally block to ensure proper logging even if an error occurs.
        
        Args:
            context (ChainContext):
                 The context object containing information about the current state of the chain execution and utilities for logging.
            iteration (IterationContext):
                 The iteration object containing information about the current iteration step, including the index and any relevant data.
        
        Raises:
            Any exception raised by the skill's `run_in_current_thread` method will propagate after logging the end of the iteration.

        """
        index = iteration.index
        context.logger.debug(f'message="start iteration" index="{index}"')
        try:
            self._skill.inner.run_in_current_thread(context, Option.some(iteration))
        finally:
            context.logger.debug(f'message="end iteration" index="{index}"')

    def _generate(self, context: ChainContext) -> Iterable[IterationContext]:
        """
        Generates an iterable sequence of IterationContext objects from the underlying generator.
        This method takes a ChainContext object as an input and enumerates over the
        items produced by the internal generator. Each item along with its index is
        packaged into an IterationContext object which is then yielded. If an exception
        occurs during iteration, it wraps and raises a RunnerGeneratorError.
        
        Args:
            context (ChainContext):
                 The context object providing environmental
                information for the generation process.
        
        Returns:
            (Iterable[IterationContext]):
                 An iterable of IterationContext objects, each
                representing an item and its respective index from the generator.
        
        Raises:
            RunnerGeneratorError:
                 An error wrapping the original exception if any
                occurs during the iteration over the generator.

        """
        try:
            for index, item in enumerate(self._generator(context)):
                yield IterationContext(index, item)
        except Exception as e:
            raise RunnerGeneratorError from e
