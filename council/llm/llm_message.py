"""

Provides classes and functions to manage and manipulate messages within a chat context, including representation of different message roles and conversion from chat messages to a standardized message format.

This module defines the LLMMessageRole enumeration that categorizes different types of messages such as user, system, and assistant messages. It also defines the LLMMessage class for creating and handling these message types with additional functionality to convert from generic ChatMessage instances. The LLMessageTokenCounterBase abstract class provides an interface for counting the number of tokens in a sequence of LLMMessage instances.

Classes:
    LLMMessageRole(Enum): An enumeration to define different roles a message can have within a conversation.
    LLMMessage: A class that encapsulates properties and behaviors of messages within a chat system.
    LLMessageTokenCounterBase(abc.ABC): An abstract base class for counting the number of tokens in messages.

Functions:
    None

Attributes:
    None


"""
from __future__ import annotations

import abc
from enum import Enum
from typing import Iterable, List, Optional, Sequence

from council.contexts import ChatMessage, ChatMessageKind


class LLMMessageRole(str, Enum):
    """
    Class that defines the roles of messages within a chat or messaging system.
    This class inherits from Python's built-in `str` type and the `Enum` class to create a set of
    predefined roles that a message can have in a conversation. Each enum member represents a
    different role a message could be associated with, indicating whether the message is from the user,
    the system, or the assistant.
    
    Attributes:
        User (str):
             Represents a message that originates from the user interacting with the system.
        System (str):
             Represents a message that is automatically generated by the system itself.
        Assistant (str):
             Represents a message generated by an assistant, which may be a chatbot or
            any artificial helper.
        

    """

    User = "user"
    """
    Represents a message from the user.
    """

    System = "system"
    """
    Represents a system-generated message.
    """

    Assistant = "assistant"
    """
    Represents a message from the assistant.
    """


class LLMMessage:
    """
    A class representing a message in a conversational exchange, encapsulating different roles such as system, user, and assistant messages.
    
    Attributes:
        _role (LLMMessageRole):
             The role of the message, indicating whether it's a system, user, or assistant message.
        _content (str):
             The text content of the message.
        _name (Optional[str]):
             The optional name associated with the message sender.
    
    Methods:
        __init__:
             Constructor to create an instance of LLMMessage.
        system_message:
             Static method to create a system message instance of LLMMessage.
        user_message:
             Static method to create a user message instance of LLMMessage.
        assistant_message:
             Static method to create an assistant message instance of LLMMessage.
        dict:
             Method to transform the LLMMessage object into a dictionary representation.
        content:
             Property to get the content attribute of the LLMMessage instance.
        name:
             Property to get the name associated with the message sender.
        role:
             Property to get the role of the LLMMessage instance.
        is_of_role:
             Method to determine if the message is of a specific role.
        from_chat_message:
             Static method to create an LLMMessage instance from a ChatMessage object.
        from_chat_messages:
             Static method to create a list of LLMMessage instances from an iterable of ChatMessage objects.

    """

    _role: LLMMessageRole
    _content: str

    def __init__(self, role: LLMMessageRole, content: str, name: Optional[str] = None) -> None:
        """
        Initializes a new instance of a message object with a specified role, content, and an optional name.
        
        Args:
            role (LLMMessageRole):
                 An enum representing the role of the message, such as sender or receiver.
            content (str):
                 The actual text content of the message.
            name (Optional[str]):
                 An optional name for the entity associated with this message. Default is None.

        """
        self._role = role
        self._content = content
        self._name = name

    @staticmethod
    def system_message(content: str, name: Optional[str] = None) -> LLMMessage:
        """
        Creates an instance of LLMMessage representing a system-generated message.
        This static method constructs a new LLMMessage with a role set to LLMMessageRole.System,
        indicating the message is originating from the system rather than a user or the assistant.
        
        Args:
            content (str):
                 The content of the message to be created.
            name (Optional[str], optional):
                 An optional name that may be associated with this system message.
                Defaults to None.
        
        Returns:
            (LLMMessage):
                 An LLMMessage object instantiated as a system message with the given content
                and an optional name.
            

        """
        return LLMMessage(role=LLMMessageRole.System, content=content, name=name)

    @staticmethod
    def user_message(content: str, name: Optional[str] = None) -> LLMMessage:
        """
        Creates an LLMMessage instance representing a user's message.
        This method is a static factory function that constructs a new LLMMessage
        object representing a message that originates from a user. The role for such
        messages is set as `LLMMessageRole.User`. An optional `name` can be provided
        as the sender's identifier.
        
        Args:
            content (str):
                 The content of the user's message.
            name (Optional[str], optional):
                 The name or identifier of the user.
                Defaults to None.
        
        Returns:
            (LLMMessage):
                 An instance of LLMMessage with the role set to `User` and
                the provided content and name.

        """
        return LLMMessage(role=LLMMessageRole.User, content=content, name=name)

    @staticmethod
    def assistant_message(content: str, name: Optional[str] = None) -> LLMMessage:
        """
        Creates an instance of LLMMessage representing a message from an assistant.
        This static method constructs a new LLMMessage instance with the role set to 'Assistant', using the provided content and optionally the name of the assistant.
        
        Args:
            content (str):
                 The content of the assistant's message.
            name (Optional[str]):
                 The name of the assistant sending the message. Defaults to None.
        
        Returns:
            (LLMMessage):
                 An instance of LLMMessage with the specified content and role as 'Assistant'.
            

        """
        return LLMMessage(role=LLMMessageRole.Assistant, content=content, name=name)

    def dict(self) -> dict[str, str]:
        """
        Creates a dictionary representation of the object with certain attributes.

        """
        result = {"role": self._role.value, "content": self._content}
        if self._name is not None:
            result["name"] = self._name
        return result

    @property
    def content(self) -> str:
        """
        Property that gets the current value of the object's content.
        This property getter method returns the private `_content` attribute holding the content of the object.
        It's a read-only property that does not allow direct modification of the underlying attribute.
        
        Returns:
            (str):
                 The text content stored within the object.

        """
        return self._content

    @property
    def name(self) -> Optional[str]:
        """
        Gets the name of the object, if set.
        
        Returns:
            (Optional[str]):
                 The name of the object, or None if not set.

        """
        return self._name

    @property
    def role(self) -> LLMMessageRole:
        """
        Gets the role of the LLMMessage object.
        This property is a read-only attribute that returns
        the role of the `LLMMessage` object. The role provides context
        regarding the purpose or category of the message within an
        application or system.
        
        Returns:
            (LLMMessageRole):
                 An enum indicating the role of the message.

        """
        return self._role

    def is_of_role(self, role: LLMMessageRole) -> bool:
        """
        Checks if the object's role matches the provided role.
        
        Args:
            role (LLMMessageRole):
                 The role to check against the object's role.
        
        Returns:
            (bool):
                 True if the object's role matches the provided role, False otherwise.
            

        """
        return self._role == role

    @staticmethod
    def from_chat_message(chat_message: ChatMessage) -> Optional[LLMMessage]:
        """
        Retrieves an `LLMMessage` instance from a given `ChatMessage` object if it corresponds to a user or assistant message, otherwise returns `None`. Each `ChatMessage` object contains the message and its kind. Depending on the kind (`User` or `Agent`), a new `LLMMessage` is created with the appropriate type. If the kind does not match either, the function returns `None`, indicating that no applicable `LLMMessage` could be derived from the `ChatMessage`. This can happen if the `ChatMessage` kind does not correspond to either a user or an assistant message, indicating a different category of chat message not covered by this conversion function. This static method is typically used to convert between the chat message formats of a messaging system and the internal `LLMMessage` representation used within the application or service that processes the chat messages.
        
        Args:
            chat_message (ChatMessage):
                 The chat message object to be converted into an `LLMMessage`.
        
        Returns:
            (Optional[LLMMessage]):
                 An instance of `LLMMessage` if the conversion is applicable, or `None` if the `chat_message` kind is not `User` or `Agent`.

        """
        if chat_message.kind == ChatMessageKind.User:
            return LLMMessage.user_message(chat_message.message)
        elif chat_message.kind == ChatMessageKind.Agent:
            return LLMMessage.assistant_message(chat_message.message)
        return None

    @staticmethod
    def from_chat_messages(messages: Iterable[ChatMessage]) -> List[LLMMessage]:
        """
        Converts a series of chat messages into a list of LLMMessage objects.
        This static method iterates over an iterable of ChatMessage instances and attempts to transform each one into a LLMMessage object. If the transformation is successful, the LLMMessage is included in the returned list. Messages that do not successfully convert are excluded.
        
        Args:
            messages (Iterable[ChatMessage]):
                 An iterable sequence of ChatMessage objects to be converted.
        
        Returns:
            (List[LLMMessage]):
                 A list of LLMMessage objects converted from the given chat messages.
            

        """
        m = map(LLMMessage.from_chat_message, messages)
        return [msg for msg in m if msg is not None]


class LLMessageTokenCounterBase(abc.ABC):
    """
    A base class that represents an abstract LLMessageTokenCounter. This class is meant to be subclassed and provides an abstract method count_messages_token that must be implemented in derived classes.
    
    Attributes:
        This class does not define any attributes.
    
    Methods:
        count_messages_token(self, messages:
             Sequence[LLMMessage]) -> int:
            Abstract method that should be implemented by subclasses to count the number of tokens within a sequence of LLMMessage instances.
    
    Args:
        messages (Sequence[LLMMessage]):
             A sequence of message instances that need to be processed to count tokens.
    
    Returns:
        (int):
             The total count of tokens across all given messages.
    
    Raises:
        NotImplementedError:
             If this method is called on an instance of LLMessageTokenCounterBase without being overridden in a subclass.
        

    """
    @abc.abstractmethod
    def count_messages_token(self, messages: Sequence[LLMMessage]) -> int:
        """
        Counts the number of 'LLMMessage' tokens in a sequence of messages.
        This abstract method should be implemented by subclasses to count the
        number of tokens within a collection of 'LLMMessage' objects. A 'token' is
        a distinct element within a message, commonly understood as either a word
        or symbol depending on the specific implementation.
        
        Args:
            messages (Sequence[LLMMessage]):
                 A sequence of 'LLMMessage' objects to be iterated over for token counting.
        
        Returns:
            (int):
                 The total count of tokens in all 'LLMMessage' objects in the given sequence.

        """
        pass
