"""

Module _message_list

This module provides an implementation for a collection of chat messages encapsulated by the MessageList class.
The MessageList class inherits from the MessageCollection abstract base class, thereby providing concrete implementations for the abstract properties and serving as a mutable collection of ChatMessage objects.

Classes:
    MessageList: A mutable, ordered collection of ChatMessage instances.

Attributes:
    _messages (List[ChatMessage]): A private list that stores ChatMessage instances.

Methods:
    __init__(messages: Optional[Iterable[ChatMessage]]=None):
        Initializes a new instance of the MessageList class, optionally with a supplied iterable collection of ChatMessage objects.

    messages(self) -> Iterable[ChatMessage]:
        Property that gets the iterable collection of ChatMessage objects stored within the MessageList instance.

    reversed(self) -> Iterable[ChatMessage]:
        Property that gets an iterable of ChatMessage objects in reverse order.

    add_user_message(self, message: str, data: Optional[Any]=None):
        Adds a user message to the message list with optional additional data.

    add_agent_message(self, message: str, data: Any=None):
        Adds an agent message to the message list with optional additional data.

    add_message(self, message: ChatMessage):
        Adds a specific ChatMessage object to the message list.

    add_messages(self, messages: Iterable[ChatMessage]):
        Extends the message list by appending an iterable collection of ChatMessage objects.


"""
from typing import Any, Iterable, List, Optional

from ._chat_message import ChatMessage
from ._message_collection import MessageCollection


class MessageList(MessageCollection):
    """
    A container class for managing a list of ChatMessage objects.
    This class is a specialized form of MessageCollection tailored for handling
    a sequence of ChatMessage instances. It provides methods for adding single
    or multiple messages, either generated by a user or an agent, and accessing
    the messages in their original or reverse order.
    
    Attributes:
        _messages (List[ChatMessage]):
             The internal storage for the ChatMessage instances.
    
    Methods:
        __init__(self, messages:
             Optional[Iterable[ChatMessage]] = None):
            Initializes the MessageList instance, optionally with an initial
            iterable of ChatMessage objects.
            @property
        messages(self) -> Iterable[ChatMessage]:
            Allows read-only access to the contained ChatMessage objects in their
            original order.
            @property
        reversed(self) -> Iterable[ChatMessage]:
            Allows read-only access to the contained ChatMessage objects in reverse
            order.
        add_user_message(self, message:
             str, data: Optional[Any] = None):
            Creates a user-type ChatMessage and appends it to the list.
        add_agent_message(self, message:
             str, data: Any = None):
            Creates an agent-type ChatMessage and appends it to the list.
        add_message(self, message:
             ChatMessage):
            Appends a single ChatMessage instance to the list.
        add_messages(self, messages:
             Iterable[ChatMessage]):
            Extends the list with multiple ChatMessage instances.

    """

    _messages: List[ChatMessage] = []

    def __init__(self, messages: Optional[Iterable[ChatMessage]] = None):
        """
        Initializes a new instance of the class with an optional collection of chat messages.
        The constructor allows for an iterable of ChatMessage objects to be provided, which it will use to
        initialize an internal list of messages. If no iterable is provided, the internal message list is
        initialized to an empty list.
        
        Args:
            messages (Optional[Iterable[ChatMessage]]):
                 An optional iterable of ChatMessage objects to
                initialize the internal message list. If not provided, the internal message list is initialized
                as an empty list.

        """

        self._messages = []
        if messages is not None:
            self._messages.extend(messages)

    @property
    def messages(self) -> Iterable[ChatMessage]:
        """
        Retrieves the messages from the ChatMessage iterable attribute.
        This property method provides access to the underlying `_messages` iterable that stores chat message objects.
        When invoked, it returns an iterable collection of ChatMessage instances that represent the messages
        in a chat context. The property is read-only and designed to provide a convenient way to access
        the message history.
        
        Returns:
            (Iterable[ChatMessage]):
                 An iterable collection of ChatMessage instances.
            

        """
        return self._messages

    @property
    def reversed(self) -> Iterable[ChatMessage]:
        """
        
        Returns an iterator that yields chat messages in reversed order.
            The 'reverted' property when accessed, provides an iterable sequence of ChatMessage instances,
            representing the messages in reverse chronological order. For the first implementation,
            it iterates over a collection of message collections in reverse, yielding
            all messages from each sub-collection in reverse order as well.
            In the second implementation, it simply returns an iterator that yields messages
            directly from a single '_messages' collection in reverse order.
        
        Note that this is a property, and it should be accessed as an attribute without
            parentheses.
            Assumes that 'self._collections' is an iterable of collections that each have
            a 'reverted' property or method returning an iterable of ChatMessage(s) for the first implementation,
            and 'self._messages' is an iterable of ChatMessage instances for the second implementation.
        
        Returns:
            (Iterable[ChatMessage]):
                 An iterator over ChatMessage objects in reverse order.
            

        """
        return reversed(self._messages)

    def add_user_message(self, message: str, data: Optional[Any] = None):
        """
        Adds a user message to the internal messages list along with optional data.
        The function appends a new ChatMessage object, created by the `ChatMessage.user` factory
        method, to the `_messages` attribute of the class. The new message contains the text provided
        by the user and optionally any associated data.
        
        Args:
            message (str):
                 The message text to be added.
            data (Optional[Any]):
                 Additional data related to the message (defaults to None).
        
        Note:
            This method assumes `_messages` attribute and `ChatMessage.user` factory method are
            properly defined within the context of the class making use of this function.

        """

        self._messages.append(ChatMessage.user(message, data))

    def add_agent_message(self, message: str, data: Any = None):
        """
        Adds a chat message from an agent to the internal list of chat messages.
        
        Args:
            message (str):
                 The message content from the agent to be added.
            data (Any, optional):
                 Additional data or context relevant to the message. Defaults to None if not provided.
        
        Raises:
            TypeError:
                 If the message is not a string or if the data type is not supported.

        """

        self._messages.append(ChatMessage.agent(message, data))

    def add_message(self, message: ChatMessage):
        """
        Adds a ChatMessage object to the internal messages list.
        
        Args:
            message (ChatMessage):
                 The ChatMessage object to be added to the list.
        
        Note:
            This method modifies the internal list of messages by appending the provided ChatMessage object.

        """
        self._messages.append(message)

    def add_messages(self, messages: Iterable[ChatMessage]):
        """
        Adds a collection of chat messages to an existing message list.
        
        Args:
            messages (Iterable[ChatMessage]):
                 An iterable of ChatMessage objects to be added to the message list.

        """
        self._messages.extend(messages)
