from abc import ABC
from enum import Enum
from typing import Any


class ChatMessageKind(str, Enum):
    """
    Enum representing the kinds or categories of chat messages within a chat system or application.
    """

    User = "USER"
    """
    Represents a chat message from the user.
    """

    Agent = "AGENT"
    """
    Represents a chat message from the agent or customer support representative.
    """

    Skill = "SKILL"
    """
    Represents a chat message generated by a specific skill or functionality within the chat system.
    """


class ChatMessageBase(ABC):
    """
    base class for chat messages.
    """

    _message: str
    _kind: ChatMessageKind
    _data: Any
    _is_error: bool
    _source: str

    def __init__(self, message: str, kind: ChatMessageKind, data: Any = None, source: str = "", is_error: bool = False):
        self._message = message
        self._kind = kind
        self._data = data
        self._source = source
        self._is_error = is_error

    @staticmethod
    def agent(message: str, data: Any = None, source: str = "", is_error: bool = False) -> "ChatMessageBase":
        return ChatMessageBase(message, ChatMessageKind.Agent, data, source, is_error)

    @staticmethod
    def user(message: str, data: Any = None, source: str = "", is_error: bool = False) -> "ChatMessageBase":
        return ChatMessageBase(message, ChatMessageKind.User, data, source, is_error)

    @staticmethod
    def skill(message: str, data: Any = None, source: str = "", is_error: bool = False) -> "ChatMessageBase":
        return ChatMessageBase(message, ChatMessageKind.Skill, data, source, is_error)

    @property
    def message(self) -> str:
        return self._message

    @property
    def kind(self) -> ChatMessageKind:
        return self._kind

    @property
    def is_kind_skill(self) -> bool:
        return self._kind == ChatMessageKind.Skill

    @property
    def is_kind_agent(self) -> bool:
        return self._kind == ChatMessageKind.Agent

    @property
    def is_kind_user(self) -> bool:
        return self._kind == ChatMessageKind.User

    @property
    def data(self) -> Any:
        return self._data

    @property
    def source(self) -> str:
        return self._source

    @property
    def is_ok(self) -> bool:
        return not self._is_error

    @property
    def is_error(self) -> bool:
        return self._is_error

    def is_of_kind(self, kind: ChatMessageKind) -> bool:
        return self._kind == kind

    def is_from_source(self, source: str) -> bool:
        return self._source == source

    def __str__(self):
        max_length = 50
        message = self.message[:max_length] + "..." if len(self.message) > max_length else self.message
        return f"Message of kind {self.kind}: {message}"


## todo rename into ScoredMessage
class ScoredAgentMessage:
    """
    an :class:`AgentMessage` with a scored, as returned by an :class:`~.EvaluatorBase`

    Attributes:
        message (ChatMessageBase): an agent message
        score: a score reflecting the quality of the message
    """

    message: ChatMessageBase
    score: float

    def __init__(self, message: ChatMessageBase, score: float):
        self.message = message
        self.score = score
