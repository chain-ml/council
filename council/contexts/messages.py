from abc import ABC, abstractmethod
from enum import Enum
from typing import Any


class ChatMessageKind(str, Enum):
    """
    Enum representing the kinds or categories of chat messages within a chat system or application.
    """

    User = "USER"
    """
    Represents a chat message from the user.
    """

    Agent = "AGENT"
    """
    Represents a chat message from the agent or customer support representative.
    """

    System = "SYSTEM"
    """
    Represents a system-generated chat message.
    """

    Skill = "SKILL"
    """
    Represents a chat message generated by a specific skill or functionality within the chat system.
    """


class ChatMessageBase(ABC):
    """
    base class for chat messages.

    Attributes:
        message: a text message
        kind: the kind of message
    """

    message: str
    kind: ChatMessageKind

    def __init__(self, message: str, kind: ChatMessageKind):
        self.message = message
        self.kind = kind

    def is_of_kind(self, kind: ChatMessageKind) -> bool:
        return self.kind == kind

    def __str__(self):
        max_length = 50
        message = self.message[:max_length] + "..." if len(self.message) > max_length else self.message
        return f"Message of kind {self.kind}: {message}"


class UserMessage(ChatMessageBase):
    """
    a message from the user.

    Attributes:
        message: a text message
    """

    def __init__(self, message: str):
        super().__init__(message, ChatMessageKind.User)


class AgentMessage(ChatMessageBase):
    """
    a message generated from an :class:`~.Agent`.

    Attributes:
        message: a text message
    """

    data: Any

    def __init__(self, message: str, data: Any):
        super().__init__(message, ChatMessageKind.Agent)
        self.data = data


class ScoredAgentMessage:
    """
    an :class:`AgentMessage` with a scored, as returned by an :class:`~.EvaluatorBase`

    Attributes:
        message (AgentMessage): an agent message
        score: a score reflecting the quality of the message
    """

    message: AgentMessage
    score: float

    def __init__(self, message: AgentMessage, score: float):
        self.message = message
        self.score = score


class SkillMessage(ChatMessageBase):
    """
    Base class for a message generated by a :class:`~.SkillBase`
    """

    _skill_name: str
    _data: Any

    def __init__(self, skill_name: str, message: str, data: Any = None):
        """
        Initialise a new instance.

        Arguments:
            skill_name (str): name of the skill
            message (str): a text message
            data (Any): optional data to enrich the message
        """

        super().__init__(message, ChatMessageKind.Skill)
        self._skill_name = skill_name
        self._data = data

    @abstractmethod
    def is_error(self) -> bool:
        """
        `True` if this is a :class:`~SkillErrorMessage`, otherwise `False`

        Returns:
            bool
        """
        pass

    @abstractmethod
    def is_ok(self) -> bool:
        """
        `True` if this is a :class:`SkillSuccessMessage`, otherwise `False`

        Returns:
            bool
        """
        pass

    @property
    def data(self) -> Any:
        """
        data related to the message

        Returns:
            Any
        """
        return self._data

    @property
    def from_skill(self) -> str:
        """
        the name of the :class:`.SkillBase` that has generated the message

        Returns:
            str
        """
        return self._skill_name

    def is_from_skill(self, skill_name: str) -> bool:
        """
        `True` is the message has been generated by the given :class:`.SkillBase`

        Arguments:
            skill_name (str): the skill name to check against

        Returns:
            bool
        """
        return self._skill_name == skill_name


class SkillSuccessMessage(SkillMessage):
    """
    a message generated by a :class:`.SkillBase` when executed successfully
    """

    def __init__(self, skill_name: str, message: str, data: Any = None):
        """
        initialize a new instance

        Parameters:
            skill_name (str): name of the :class:`.SkillBase` that generated the message.
            message (str): a text message.
            data (Any): optional data related to the message
        """
        super().__init__(skill_name=skill_name, message=message, data=data)

    def is_error(self) -> bool:
        return False

    def is_ok(self) -> bool:
        return True


class SkillErrorMessage(SkillMessage):
    """
    a message generated by a :class:`.SkillBase` when an error occurred
    """

    def __init__(self, skill_name: str, message: str, data: Any = None):
        """
        initialize a new instance

        Parameters:
            skill_name (str): name of the :class:`.SkillBase` that generated the message.
            message (str): a text message.
            data (Any): optional data related to the message
        """
        super().__init__(skill_name=skill_name, message=message, data=data)

    def is_ok(self) -> bool:
        return False

    def is_error(self) -> bool:
        return True
